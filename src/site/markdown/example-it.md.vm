# Integration Testing With DynamoDB Table/Fixture

This is how your JUnit integration test should look like
([`TableMocker`](./testapidocs-${project.version}/com/jcabi/dynamo/TableMocker.html) class
is used from `com.jcabi:jcabi-dynamo:mock` artifact):

```
public class FooITCase {
  private Region region;
  private TableMocker table;
  @Before
  public void prepare() {
    this.region = new Region.Simple(/* your AWS credentials */);
    this.table = new TableMocker(
      this.region,
      new CreateTableRequest()
        .withTableName("my-sample-table")
        .withProvisionedThroughput(
            new ProvisionedThroughput()
                .withReadCapacityUnits(1L)
                .withWriteCapacityUnits(1L)
        )
        .withAttributeDefinitions(
            new AttributeDefinition()
                .withAttributeName("hash")
                .withAttributeType(ScalarAttributeType.S)
        )
        .withKeySchema(
            new KeySchemaElement()
                .withAttributeName("hash")
                .withKeyType(KeyType.HASH)
        )
    );
    this.table.create();
  }
  @After
  public void dropTable() {
    this.table.drop();
  }
  @Test
  public void createsAndDeletesItems() {
    Foo foo = new Foo(this.region);
    foo.doSomething();
  }
}
```

[`TableMocker`](./testapidocs-${project.version}/com/jcabi/dynamo/TableMocker.html)
will create a table on demand and will drop it when tests are finished.

The class is shipped in `mock`-classified dependency
(you can also download
[jcabi-dynamo-${project.version}-mock.jar](http://repo1.maven.org/maven2/com/jcabi/jcabi-dynamo/${project.version}/jcabi-dynamo-${project.version}-mock.jar)
and add it to the classpath):

```
<dependency>
  <groupId>com.jcabi</groupId>
  <artifactId>jcabi-dynamo</artifactId>
  <version>${project.version}</version>
  <scope>test</scope>
  <classifier>mock</classifier>
</dependency>
```
